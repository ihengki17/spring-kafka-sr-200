/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.confluent.developer.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class User extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5446108321859279916L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"User\",\"namespace\":\"io.confluent.developer.avro\",\"fields\":[{\"name\":\"cust_id\",\"type\":\"string\"},{\"name\":\"ssn\",\"type\":\"string\"},{\"name\":\"fullname\",\"type\":\"string\"},{\"name\":\"phone_number\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<User> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<User> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<User> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<User> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<User> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this User to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a User from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a User instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static User fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence cust_id;
  private java.lang.CharSequence ssn;
  private java.lang.CharSequence fullname;
  private java.lang.CharSequence phone_number;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public User() {}

  /**
   * All-args constructor.
   * @param cust_id The new value for cust_id
   * @param ssn The new value for ssn
   * @param fullname The new value for fullname
   * @param phone_number The new value for phone_number
   */
  public User(java.lang.CharSequence cust_id, java.lang.CharSequence ssn, java.lang.CharSequence fullname, java.lang.CharSequence phone_number) {
    this.cust_id = cust_id;
    this.ssn = ssn;
    this.fullname = fullname;
    this.phone_number = phone_number;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return cust_id;
    case 1: return ssn;
    case 2: return fullname;
    case 3: return phone_number;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: cust_id = (java.lang.CharSequence)value$; break;
    case 1: ssn = (java.lang.CharSequence)value$; break;
    case 2: fullname = (java.lang.CharSequence)value$; break;
    case 3: phone_number = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'cust_id' field.
   * @return The value of the 'cust_id' field.
   */
  public java.lang.CharSequence getCustId() {
    return cust_id;
  }


  /**
   * Sets the value of the 'cust_id' field.
   * @param value the value to set.
   */
  public void setCustId(java.lang.CharSequence value) {
    this.cust_id = value;
  }

  /**
   * Gets the value of the 'ssn' field.
   * @return The value of the 'ssn' field.
   */
  public java.lang.CharSequence getSsn() {
    return ssn;
  }


  /**
   * Sets the value of the 'ssn' field.
   * @param value the value to set.
   */
  public void setSsn(java.lang.CharSequence value) {
    this.ssn = value;
  }

  /**
   * Gets the value of the 'fullname' field.
   * @return The value of the 'fullname' field.
   */
  public java.lang.CharSequence getFullname() {
    return fullname;
  }


  /**
   * Sets the value of the 'fullname' field.
   * @param value the value to set.
   */
  public void setFullname(java.lang.CharSequence value) {
    this.fullname = value;
  }

  /**
   * Gets the value of the 'phone_number' field.
   * @return The value of the 'phone_number' field.
   */
  public java.lang.CharSequence getPhoneNumber() {
    return phone_number;
  }


  /**
   * Sets the value of the 'phone_number' field.
   * @param value the value to set.
   */
  public void setPhoneNumber(java.lang.CharSequence value) {
    this.phone_number = value;
  }

  /**
   * Creates a new User RecordBuilder.
   * @return A new User RecordBuilder
   */
  public static io.confluent.developer.avro.User.Builder newBuilder() {
    return new io.confluent.developer.avro.User.Builder();
  }

  /**
   * Creates a new User RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new User RecordBuilder
   */
  public static io.confluent.developer.avro.User.Builder newBuilder(io.confluent.developer.avro.User.Builder other) {
    if (other == null) {
      return new io.confluent.developer.avro.User.Builder();
    } else {
      return new io.confluent.developer.avro.User.Builder(other);
    }
  }

  /**
   * Creates a new User RecordBuilder by copying an existing User instance.
   * @param other The existing instance to copy.
   * @return A new User RecordBuilder
   */
  public static io.confluent.developer.avro.User.Builder newBuilder(io.confluent.developer.avro.User other) {
    if (other == null) {
      return new io.confluent.developer.avro.User.Builder();
    } else {
      return new io.confluent.developer.avro.User.Builder(other);
    }
  }

  /**
   * RecordBuilder for User instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<User>
    implements org.apache.avro.data.RecordBuilder<User> {

    private java.lang.CharSequence cust_id;
    private java.lang.CharSequence ssn;
    private java.lang.CharSequence fullname;
    private java.lang.CharSequence phone_number;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.confluent.developer.avro.User.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.cust_id)) {
        this.cust_id = data().deepCopy(fields()[0].schema(), other.cust_id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.ssn)) {
        this.ssn = data().deepCopy(fields()[1].schema(), other.ssn);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.fullname)) {
        this.fullname = data().deepCopy(fields()[2].schema(), other.fullname);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.phone_number)) {
        this.phone_number = data().deepCopy(fields()[3].schema(), other.phone_number);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing User instance
     * @param other The existing instance to copy.
     */
    private Builder(io.confluent.developer.avro.User other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.cust_id)) {
        this.cust_id = data().deepCopy(fields()[0].schema(), other.cust_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ssn)) {
        this.ssn = data().deepCopy(fields()[1].schema(), other.ssn);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.fullname)) {
        this.fullname = data().deepCopy(fields()[2].schema(), other.fullname);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.phone_number)) {
        this.phone_number = data().deepCopy(fields()[3].schema(), other.phone_number);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'cust_id' field.
      * @return The value.
      */
    public java.lang.CharSequence getCustId() {
      return cust_id;
    }


    /**
      * Sets the value of the 'cust_id' field.
      * @param value The value of 'cust_id'.
      * @return This builder.
      */
    public io.confluent.developer.avro.User.Builder setCustId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.cust_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'cust_id' field has been set.
      * @return True if the 'cust_id' field has been set, false otherwise.
      */
    public boolean hasCustId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'cust_id' field.
      * @return This builder.
      */
    public io.confluent.developer.avro.User.Builder clearCustId() {
      cust_id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'ssn' field.
      * @return The value.
      */
    public java.lang.CharSequence getSsn() {
      return ssn;
    }


    /**
      * Sets the value of the 'ssn' field.
      * @param value The value of 'ssn'.
      * @return This builder.
      */
    public io.confluent.developer.avro.User.Builder setSsn(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.ssn = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'ssn' field has been set.
      * @return True if the 'ssn' field has been set, false otherwise.
      */
    public boolean hasSsn() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'ssn' field.
      * @return This builder.
      */
    public io.confluent.developer.avro.User.Builder clearSsn() {
      ssn = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'fullname' field.
      * @return The value.
      */
    public java.lang.CharSequence getFullname() {
      return fullname;
    }


    /**
      * Sets the value of the 'fullname' field.
      * @param value The value of 'fullname'.
      * @return This builder.
      */
    public io.confluent.developer.avro.User.Builder setFullname(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.fullname = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'fullname' field has been set.
      * @return True if the 'fullname' field has been set, false otherwise.
      */
    public boolean hasFullname() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'fullname' field.
      * @return This builder.
      */
    public io.confluent.developer.avro.User.Builder clearFullname() {
      fullname = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'phone_number' field.
      * @return The value.
      */
    public java.lang.CharSequence getPhoneNumber() {
      return phone_number;
    }


    /**
      * Sets the value of the 'phone_number' field.
      * @param value The value of 'phone_number'.
      * @return This builder.
      */
    public io.confluent.developer.avro.User.Builder setPhoneNumber(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.phone_number = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'phone_number' field has been set.
      * @return True if the 'phone_number' field has been set, false otherwise.
      */
    public boolean hasPhoneNumber() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'phone_number' field.
      * @return This builder.
      */
    public io.confluent.developer.avro.User.Builder clearPhoneNumber() {
      phone_number = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public User build() {
      try {
        User record = new User();
        record.cust_id = fieldSetFlags()[0] ? this.cust_id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.ssn = fieldSetFlags()[1] ? this.ssn : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.fullname = fieldSetFlags()[2] ? this.fullname : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.phone_number = fieldSetFlags()[3] ? this.phone_number : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<User>
    WRITER$ = (org.apache.avro.io.DatumWriter<User>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<User>
    READER$ = (org.apache.avro.io.DatumReader<User>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.cust_id);

    out.writeString(this.ssn);

    out.writeString(this.fullname);

    out.writeString(this.phone_number);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.cust_id = in.readString(this.cust_id instanceof Utf8 ? (Utf8)this.cust_id : null);

      this.ssn = in.readString(this.ssn instanceof Utf8 ? (Utf8)this.ssn : null);

      this.fullname = in.readString(this.fullname instanceof Utf8 ? (Utf8)this.fullname : null);

      this.phone_number = in.readString(this.phone_number instanceof Utf8 ? (Utf8)this.phone_number : null);

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.cust_id = in.readString(this.cust_id instanceof Utf8 ? (Utf8)this.cust_id : null);
          break;

        case 1:
          this.ssn = in.readString(this.ssn instanceof Utf8 ? (Utf8)this.ssn : null);
          break;

        case 2:
          this.fullname = in.readString(this.fullname instanceof Utf8 ? (Utf8)this.fullname : null);
          break;

        case 3:
          this.phone_number = in.readString(this.phone_number instanceof Utf8 ? (Utf8)this.phone_number : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










